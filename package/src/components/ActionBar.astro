---
import { twMerge } from "tailwind-merge";
import Icon from "./Icon.astro";
import ActionBarItem from "./ActionBarItem.astro";

const { size = "medium", class: className, ...props } = Astro.props;

const baseClasses = "m-2 inline-flex items-center";
const sizeClasses = { large: "h-10", medium: "h-8", small: "h-7" };
---

<div
	x-data="{ isOpen: false, itemsVisibility: {} }"
	class={twMerge(
		`action-bar ${baseClasses} ${sizeClasses[size]} ${className}`
	)}
	role="toolbar"
	{...props}
>
	<div class="flex justify-end items-center relative">
		<slot name="items" />
		<ActionBarItem class="overflow-menu-kebab" @click="isOpen = !isOpen">
			<Icon iconName="kebab-horizontal" />
		</ActionBarItem>
		<div
			x-show="isOpen"
			class="overflow-menu rounded-lg shadow-md h-20 absolute flex items-start flex-col bg-white w-48 right-0 top-full"
			role="menu"
		>
			<template x-for="item in Object.keys(itemsVisibility)" :key="item">
				<div
					x-show="!itemsVisibility[item]"
					class="p-2 hover:bg-gray-100 cursor-pointer"
					@click="isOpen = false"
				>
					<span x-text="item"></span>
				</div>
			</template>
		</div>
	</div>
</div>

<script>
	import "alpinejs";

	document.addEventListener("alpine:init", () => {
		Alpine.data("overflowMenu", () => ({
			isOpen: false,
			itemsVisibility: {},
			init() {
				this.updateVisibility();
				window.addEventListener("resize", () => {
					this.updateVisibility();
				});
			},
			updateVisibility() {
				const actionBar = this.$el;
				const items = actionBar.querySelectorAll(
					".action-bar-item:not(.overflow-menu-kebab)"
				);
				let totalWidth = 0;
				const kebabWidth =
					actionBar.querySelector(".overflow-menu-kebab")
						.offsetWidth || 0;
				const actionBarWidth = actionBar.clientWidth - kebabWidth;
				items.forEach((item, index) => {
					totalWidth += item.offsetWidth;
					this.$set(
						this.itemsVisibility,
						item.textContent.trim(),
						totalWidth <= actionBarWidth
					);
				});
			},
		}));
	});
</script>
