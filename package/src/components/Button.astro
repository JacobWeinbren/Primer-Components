---
import { twMerge } from "tailwind-merge";
import Icon from "./Icon.astro";

const {
	class: className,
	size = "medium",
	alignContent = "center",
	variant = "secondary",
	icon,
	...props
} = Astro.props;

// Consolidated variant-specific classes with state handling
const variantClasses = {
	primary: {
		base: `bg-[--button-primary-bgColor-rest] border-[--button-primary-borderColor-rest] text-[--button-primary-fgColor-rest]`,
		disabled:
			"bg-[--button-primary-bgColor-disabled] border-[--button-primary-borderColor-disabled] text-[--button-primary-fgColor-disabled] cursor-not-allowed",
		active: "hover:text-[--button-primary-fgColor-rest] hover:bg-[--button-primary-bgColor-hover] hover:border-[--button-primary-borderColor-hover] hover:[box-shadow:var(--shadow-resting-small),var(--shadow-resting-xsmall)] active:bg-[--button-primary-bgColor-active] active:border-[--button-primary-borderColor-hover] active:[box-shadow:var(--shadow-inset)]",
	},
	secondary: {
		base: `bg-[--button-default-bgColor-rest] border-[--button-default-borderColor-rest] text-[--button-default-fgColor-rest]`,
		disabled:
			"bg-[--button-default-bgColor-rest] border-[--button-default-borderColor-disabled] text-[--fgColor-disabled] cursor-not-allowed",
		active: "hover:text-[--button-default-fgColor-rest] hover:bg-[--button-default-bgColor-rest] hover:border-[--button-default-borderColor-hover] hover:[box-shadow:var(--shadow-resting-small),var(--shadow-resting-xsmall)] active:bg-[--button-default-bgColor-active] active:border-[--button-default-borderColor-hover] active:[box-shadow:var(--shadow-inset)]",
	},
	danger: {
		base: `bg-[--button-default-bgColor-rest] border-[--button-danger-borderColor-rest] text-[--button-danger-fgColor-rest]`,
		disabled:
			"bg-[--button-danger-bgColor-disabled] border-transparent text-[--button-danger-fgColor-disabled] cursor-not-allowed",
		active: "hover:text-[--button-danger-fgColor-hover] hover:bg-[--button-danger-bgColor-hover] hover:border-[--button-danger-borderColor-hover] hover:[box-shadow:var(--shadow-resting-small),var(--shadow-resting-xsmall)] active:bg-[--button-danger-bgColor-active] active:border-[--button-danger-borderColor-hover] active:[box-shadow:var(--shadow-inset)]",
	},
	invisible: {
		base: `bg-[--button-invisible-bgColor-rest] border-transparent text-[--fgColor-link] [box-shadow:none]`,
		disabled:
			"bg-[--button-invisible-bgColor-disabled] border-transparent text-[--button-invisible-fgColor-disabled] cursor-not-allowed",
		active: "hover:text-[--button-invisible-fgColor-hover] hover:bg-[--button-invisible-bgColor-hover] hover:border-transparent active:bg-[--button-invisible-bgColor-active] active:border-transparent",
	},
};

const baseClasses = `border [box-shadow:var(--button-default-shadow-resting)] inline-flex items-center justify-center rounded-[--borderRadius-medium] focus-visible:ring-2 focus-visible:ring-[--focus-outlineColor] focus-visible:outline-none text-[0.875rem] font-semibold leading-[142.85%] white-space:nowrap overflow-hidden`;

const sizeClasses = {
	large: "py-[--control-large-paddingBlock] px-[--control-large-paddingInline-spacious] text-[0.875rem] leading-[1.25rem] gap-[--control-large-gap]",
	medium: "py-[--control-medium-paddingBlock] px-[--control-medium-paddingInline-normal] text-[0.875rem] leading-[142.85%] gap-[--control-medium-gap]",
	small: "py-[--control-small-paddingBlock] px-[--control-small-paddingInline-condensed] text-[0.75rem] leading-[166.66%] gap-[--control-small-gap]",
};

const startWidths = {
	large: "w-[11.375rem]",
	medium: "w-[10.875rem]",
	small: "w-[9.75rem]",
};

const alignClasses =
	alignContent === "start"
		? `justify-start ${startWidths[size]}`
		: "justify-center";

const stateClasses =
	props.disabled ||
	icon?.leading === "loading" ||
	icon?.trailing === "loading" ||
	icon?.action === "loading"
		? variantClasses[variant].disabled
		: props.inactive
			? "bg-[--button-inactive-bgColor] text-[--button-inactive-fgColor]"
			: variantClasses[variant].active;
---

<button
	class={twMerge(
		`${baseClasses} ${variantClasses[variant].base} ${sizeClasses[size]} ${alignClasses} ${stateClasses} ${className}`
	)}
	{...props}
	disabled={props.disabled}
	aria-disabled={icon?.leading === "loading" ||
	icon?.trailing === "loading" ||
	icon?.action === "loading"
		? "true"
		: undefined}
>
	{
		icon?.leading && (
			<span class="flex-shrink-0">
				<Icon iconName={icon.leading} iconClass="fill-current" />
			</span>
		)
	}
	<slot class="flex-grow" />
	{
		icon?.trailing && (
			<span class="flex-shrink-0">
				<Icon iconName={icon.trailing} iconClass="fill-current" />
			</span>
		)
	}
	{
		icon?.action && (
			<span class="ml-auto flex-shrink-0">
				<Icon iconName={icon.action} iconClass="fill-current" />
			</span>
		)
	}
</button>

{
	props.loadingMessage ? (
		<span class="sr-only" aria-live="polite">
			{props.loadingMessage}
		</span>
	) : null
}
